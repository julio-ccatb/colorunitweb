generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "npx zod-prisma-types"
  useMultipleFiles = "true"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_idx")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  account       Account[]
  session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

model Base {
  id          Int           @id @default(autoincrement())
  reforiginal String
  tbaseId     Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  slang       String
  tbase       Tbase         @relation(fields: [tbaseId], references: [id], map: "Base_tbaseId_fkey")
  regcolbases Regcolbases[]

  @@index([tbaseId], map: "Base_tbaseId_fkey")
}

model Colorant {
  id              Int               @id @default(autoincrement())
  description     String
  shortcode       String            @unique
  active          Boolean           @default(true)
  gramUP          Decimal           @db.Decimal(65, 2)
  gramUG          Decimal           @db.Decimal(65, 2)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  regcolcolorants Regcolcolorants[]
}

model Regcol {
  id              Int               @id @default(autoincrement())
  description     String?
  carta           Int?
  R               Int
  G               Int
  B               Int
  tbaseId         Int?
  pesopromedio    Decimal?          @db.Decimal(65, 2)
  brillo          Decimal?          @db.Decimal(65, 2)
  active          Boolean?
  coeficienteG    Decimal?          @db.Decimal(65, 2)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  regcolbases     Regcolbases[]
  regcolcolorants Regcolcolorants[]
  Tbase           Tbase?            @relation(fields: [tbaseId], references: [id])
}

model Regcolbases {
  id       Int     @id @default(autoincrement())
  regColId Int
  baseId   Int
  amount   Decimal @db.Decimal(65, 2)
  base     Base    @relation(fields: [baseId], references: [id], map: "RegColBases_baseId_fkey")
  regcol   Regcol  @relation(fields: [regColId], references: [id], map: "RegColBases_regColId_fkey")

  @@index([baseId], map: "RegColBases_baseId_fkey")
  @@index([regColId], map: "RegColBases_regColId_fkey")
}

model Regcolcolorants {
  id         Int      @id @default(autoincrement())
  regColId   Int
  colorantId Int
  amount     Decimal  @db.Decimal(65, 2)
  colorant   Colorant @relation(fields: [colorantId], references: [id], map: "RegColColorants_colorantId_fkey")
  regcol     Regcol   @relation(fields: [regColId], references: [id], map: "RegColColorants_regColId_fkey")

  @@index([colorantId], map: "RegColColorants_colorantId_fkey")
  @@index([regColId], map: "RegColColorants_regColId_fkey")
}

model Tbase {
  id          Int      @id @default(autoincrement())
  description String
  shortcode   String   @unique(map: "TBase_shortcode_key")
  peso1       Decimal? @db.Decimal(65, 2)
  peso2       Decimal? @db.Decimal(65, 2)
  peso3       Decimal? @db.Decimal(65, 2)
  peso4       Decimal? @db.Decimal(65, 2)
  peso5       Decimal? @db.Decimal(65, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  base        Base[]
  regCol      Regcol[]
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider       = "zod-prisma-types"
  addIncludeType = false // default is true
  addSelectType  = false // default is true
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Post          Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Colorant {
  id              Int               @id @default(autoincrement())
  description     String
  shortcode       String
  basecodi        Int
  gramUP          Float
  gramUG          Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  regColColorants RegColColorants[]
}

model TBase {
  id          Int      @id @default(autoincrement())
  description String
  shortcode   String
  peso1       Float?
  peso2       Float?
  peso3       Float?
  peso4       Float?
  peso5       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bases       Base[]
}

model Base {
  id          Int           @id @default(autoincrement())
  reforiginal String?
  tbaseId     Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  slang       String?
  tbase       TBase         @relation(fields: [tbaseId], references: [id])
  regColBases RegColBases[]

  @@index([tbaseId], map: "Base_tbaseId_fkey")
}

model RegCol {
  id              Int               @id @default(autoincrement())
  description     String?
  carta           Int?
  R               Int
  G               Int
  B               Int
  pesopromedio    Float?
  brillo          Float?
  active          Boolean?
  coeficienteG    Float?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  regColBases     RegColBases[]
  regColColorants RegColColorants[]
}

model RegColColorants {
  id         Int      @id @default(autoincrement())
  regColId   Int
  colorantId Int
  amount     Float
  colorant   Colorant @relation(fields: [colorantId], references: [id])
  regCol     RegCol   @relation(fields: [regColId], references: [id])

  @@index([colorantId], map: "RegColColorants_colorantId_fkey")
  @@index([regColId], map: "RegColColorants_regColId_fkey")
}

model RegColBases {
  id       Int    @id @default(autoincrement())
  regColId Int
  baseId   Int
  amount   Float
  base     Base   @relation(fields: [baseId], references: [id])
  regCol   RegCol @relation(fields: [regColId], references: [id])

  @@index([baseId], map: "RegColBases_baseId_fkey")
  @@index([regColId], map: "RegColBases_regColId_fkey")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  createdById String
  User        User     @relation(fields: [createdById], references: [id])

  @@index([createdById], map: "Post_createdById_fkey")
  @@index([name])
}

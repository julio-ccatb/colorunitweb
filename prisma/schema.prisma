// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                  = "zod-prisma-types"
  createPartialTypes        = "true"
  createRelationValuesTypes = "true"
  useMultipleFiles          = "true"
  writeNullishInModelTypes  = true
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Role {
  roleId String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([roleId, userId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Base {
  id          Int           @id @default(autoincrement())
  reforiginal String
  tbaseId     Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  peso        Decimal       @db.Decimal(65, 2)
  slang       String
  tbase       Tbase         @relation(fields: [tbaseId], references: [id])
  regcolbases Regcolbases[]

  @@index([tbaseId])
}

model Colorant {
  id              Int               @id @default(autoincrement())
  description     String
  shortcode       String            @unique()
  gramUP          Decimal           @db.Decimal(65, 2)
  gramUG          Decimal           @db.Decimal(65, 2)
  pure            Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  active          Boolean           @default(true)
  regcolcolorants Regcolcolorants[]
}

model Regcol {
  id              Int                @id @default(autoincrement())
  description     String?
  carta           Int?
  R               Int /// @zod.number.lte(255).gte(0); 
  G               Int /// @zod.number.lte(255).gte(0);
  B               Int /// @zod.number.lte(255).gte(0);
  pesopromedio    Decimal?           @db.Decimal(65, 2)
  brillo          Decimal?           @db.Decimal(65, 2)
  active          Boolean?
  coeficienteG    Decimal?           @db.Decimal(65, 2)
  note            String?            @db.Text()
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now()) @updatedAt
  tbaseId         Int?
  process         Boolean            @default(false)
  tbase           Tbase?             @relation(fields: [tbaseId], references: [id])
  regcolbases     Regcolbases[]
  regcolcolorants Regcolcolorants[]
  orders          Order[]
  extended        ExtendedOnRegCol[]

  @@index([tbaseId])
}

model Regcolbases {
  id       Int     @id @default(autoincrement())
  regColId Int
  baseId   Int
  amount   Decimal @db.Decimal(65, 2)
  base     Base    @relation(fields: [baseId], references: [id])
  regcol   Regcol  @relation(fields: [regColId], references: [id])

  @@index([baseId])
  @@index([regColId])
}

model Regcolcolorants {
  id         Int      @id @default(autoincrement())
  regColId   Int
  colorantId Int
  amount     Decimal  @db.Decimal(65, 2)
  colorant   Colorant @relation(fields: [colorantId], references: [id])
  regcol     Regcol   @relation(fields: [regColId], references: [id])

  @@index([colorantId])
  @@index([regColId])
}

model Order {
  id        String    @id @default(cuid())
  regcolId  Int
  amaunt    Decimal
  status    Int       @default(0)
  regcol    Regcol    @relation(fields: [regcolId], references: [id])
  createdAt DateTime  @default(now())
  processAt DateTime?
  closedAt  DateTime?

  @@index([regcolId])
}

model Customer {
  id        String     @id /// @zod.string.min(10)
  firstName String /// @zod.string.min(2)
  lastName  String?
  email     String     @unique() /// @zod.string.min(2)
  isCompany Boolean
  createdAt DateTime   @default(now())
  extended  Extended[]
}

model Extended {
  id         Int                @id @default(autoincrement())
  createdAt  DateTime           @default(now())
  name       String
  brillo     Decimal?           @db.Decimal(65, 2)
  R          Decimal            @db.Decimal(65, 2)
  G          Decimal            @db.Decimal(65, 2)
  B          Decimal            @db.Decimal(65, 2)
  HEX        String?
  tbaseId    Int?
  tbase      Tbase?             @relation(fields: [tbaseId], references: [id])
  regcols    ExtendedOnRegCol[]
  customerId String
  customer   Customer           @relation(fields: [customerId], references: [id])

  @@index([tbaseId])
  @@index([customerId])
}

model ExtendedOnRegCol {
  id         Int      @id
  regcolId   Int
  regcol     Regcol   @relation(fields: [regcolId], references: [id])
  extendedId Int
  extended   Extended @relation(fields: [extendedId], references: [id])

  @@index([regcolId])
  @@index([extendedId])
}

model Tbase {
  id          Int        @id @default(autoincrement())
  description String /// @zod.string.min(4)
  shortcode   String     @unique() /// @zod.string.min(2)
  peso1       Decimal?   @db.Decimal(65, 2)
  peso2       Decimal?   @db.Decimal(65, 2)
  peso3       Decimal?   @db.Decimal(65, 2)
  peso4       Decimal?   @db.Decimal(65, 2)
  peso5       Decimal?   @db.Decimal(65, 2)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  base        Base[]
  regcol      Regcol[]
  extended    Extended[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique()
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  account       Account[]
  role          Role[]
  session       Session[]
}

model Verificationtoken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}
